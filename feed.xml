<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://flyingpika.github.io/lazy.github.io/</id><title>lazy</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-04-01T21:10:12+08:00</updated> <author> <name>lazy</name> <uri>https://flyingpika.github.io/lazy.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://flyingpika.github.io/lazy.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://flyingpika.github.io/lazy.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 lazy </rights> <icon>/lazy.github.io/assets/img/favicons/favicon.ico</icon> <logo>/lazy.github.io/assets/img/favicons/favicon-96x96.png</logo> <entry><title>CGAL 5.5 数值类型</title><link href="https://flyingpika.github.io/lazy.github.io/posts/number-types/" rel="alternate" type="text/html" title="CGAL 5.5 数值类型" /><published>2022-10-05T00:00:00+08:00</published> <updated>2022-10-05T00:00:00+08:00</updated> <id>https://flyingpika.github.io/lazy.github.io/posts/number-types/</id> <content src="https://flyingpika.github.io/lazy.github.io/posts/number-types/" /> <author> <name>lazy</name> </author> <category term="CG" /> <category term="GEOMETRY" /> <summary> https://doc.cgal.org/latest/Number_types/index.html#Chapter_Number_Types 1 介绍 本章节概述了 CGAL 支持的数值类型。数值类型必须满足某些语法和语义要求，这样才能被用于 CGAL 代码。总体上，它们是代数结构的模型。如果它们是实数子环的模型，它们也是 RealEmbeddable 的模型。 2 内置数值类型 内置数值类型 float、double 和 long double 具有所需的算术和比较运算符。它们缺少一些必需的例行程序，尽管这些例行程序被 CGAL 自动包含。 所有 C++ 内置数值类型只能表示有理数的离散（有界）子集。假设浮点运算遵循 IEEE 浮点标准。浮点文化具有比精确计算更多的基础结构支持（硬件、语言定义和编译器），因而非常高效。与所有具有有限精度表示的数值类型一样，内置数值类型... </summary> </entry> <entry><title>CGAL 5.5 三维快速相交和距离计算（AABB Tree）</title><link href="https://flyingpika.github.io/lazy.github.io/posts/aabb-tree/" rel="alternate" type="text/html" title="CGAL 5.5 三维快速相交和距离计算（AABB Tree）" /><published>2022-09-06T00:00:00+08:00</published> <updated>2022-09-06T00:00:00+08:00</updated> <id>https://flyingpika.github.io/lazy.github.io/posts/aabb-tree/</id> <content src="https://flyingpika.github.io/lazy.github.io/posts/aabb-tree/" /> <author> <name>lazy</name> </author> <category term="CG" /> <category term="GEOMETRY" /> <summary> https://doc.cgal.org/latest/AABB_tree/index.html#Chapter_3D_Fast_Intersection_and_Distance_Computation 1 介绍 AABB tree 组件体提供静态数据结构和算法，以对三维几何对象进行有效的相交和距离查询。相交查询可以是任何类型，只要对应相交谓词和构造在特征类中实现。距离查询限制为点查询。 注意此组件不适用于查找所有相交对象对。 AABB tree 数据结构将几何数据迭代器范围作为输入，然后将其转换为基元。AABBs 由这些基元构造，并用于加速相交和距离查询。每个基元可以访问输入几何对象与对象的索引编号。每次相交查询可以返回相交对象和相交基元的编号。与之类似，每次距离查询返回最近点和最近基元的编号。 2 接口 该组件的重要切入点是 AABB_tree 类，其表示静态 AA... </summary> </entry> <entry><title>CGAL 5.5 多边形网格处理</title><link href="https://flyingpika.github.io/lazy.github.io/posts/p-m-p/" rel="alternate" type="text/html" title="CGAL 5.5 多边形网格处理" /><published>2022-09-05T00:00:00+08:00</published> <updated>2022-09-05T00:00:00+08:00</updated> <id>https://flyingpika.github.io/lazy.github.io/posts/p-m-p/</id> <content src="https://flyingpika.github.io/lazy.github.io/posts/p-m-p/" /> <author> <name>lazy</name> </author> <category term="CG" /> <category term="GEOMETRY" /> <summary> https://doc.cgal.org/latest/Polygon_mesh_processing/index.html#title58 1 介绍 该包实现了一系列用于多边形网格处理的方法和类，从基础操作到复杂几何处理算法。该包的实现主要遵循 Botsch 等人的著作 Polygon Mesh Processing。 1.1 多边形网格 多边形网格是一致、有向的表面网格，包含一个或多个边界。面为简单多边形，边为线段。每条边连接两个顶点，由两个面共享。多边形网格可以有任意数量的连通分量和自相交。该包视多边形网格为二维流形。 1.2 API 该包遵循 CGAL and the Boost Graph Library 中描述的 BGL API，因此可以用于 Polyhedron_3、Surface_mesh 以及任何概念 FaceGraph 的模型。每个函数或类都详细说明了... </summary> </entry> <entry><title>Geometry Images</title><link href="https://flyingpika.github.io/lazy.github.io/posts/geometry-images/" rel="alternate" type="text/html" title="Geometry Images" /><published>2022-05-31T00:00:00+08:00</published> <updated>2022-05-31T00:00:00+08:00</updated> <id>https://flyingpika.github.io/lazy.github.io/posts/geometry-images/</id> <content src="https://flyingpika.github.io/lazy.github.io/posts/geometry-images/" /> <author> <name>lazy</name> </author> <category term="CG" /> <category term="GEOMETRY" /> <summary> 摘要 曲面几何通常使用不规则网格建模。重网格化过程指，使用半规则连通性近似这样的几何，这有利于许多图形应用。然而，现在的重网格化技术只能创建半规则网格。原始网格通常被分解为圆盘状的图表，在图表上对几何进行参数化和采样。 在这篇文章中，我们将任意曲面重网格化为完全规则结构，并称之为几何图像。它将几何捕获为二维数组，其中存储了量化的点。曲面信号，例如法线和颜色，使用相同的隐式曲面参数化（纹理坐标缺失）存储在二维数组中。为了创建几何图像，我们沿着边连成的网络对网格进行切割，将生成的图表参数化为正方形。几何图像可以使用传统的图像压缩算法编码，例如基于小波的编码器。 关键词： remeshing, surface parametrization. 1 介绍 将曲面表示为几何图像存在的挑战： 寻找割线，使网格与圆盘拓扑同胚，并允许对曲面进行良好的参数化。 ... </summary> </entry> <entry><title>Unity 2020.3.22f1 快捷键</title><link href="https://flyingpika.github.io/lazy.github.io/posts/unity-shortcut-key/" rel="alternate" type="text/html" title="Unity 2020.3.22f1 快捷键" /><published>2021-12-01T00:00:00+08:00</published> <updated>2023-04-01T21:09:02+08:00</updated> <id>https://flyingpika.github.io/lazy.github.io/posts/unity-shortcut-key/</id> <content src="https://flyingpika.github.io/lazy.github.io/posts/unity-shortcut-key/" /> <author> <name>lazy</name> </author> <category term="CG" /> <category term="UNITY" /> <summary> middle 拖动 right 观察 alt + left 围绕运动 alt + right 缩放 W A S D + right 移动 F 视野平移并缩放到当前选中对象 shift 加速移动 W 平移 E 旋转 R 缩放 T 矩形工具 ctrl + shift + N 新建游戏对象 ctrl + P 运行游戏 ctrl + R 刷新对象 </summary> </entry> </feed>
